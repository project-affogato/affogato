# Define base image.
FROM nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04
# Copy uv binary from astral-sh/uv:0.6.14s
COPY --from=ghcr.io/astral-sh/uv:0.6.14 /uv /uvx /bin/

# CUDA architecture.
ARG CUDA_ARCHITECTURES=89;86;80;
ENV TORCH_CUDA_ARCH_LIST="8.9 8.6 8.0"

# Set environment variables.
# Set non-interactive to prevent asking for user inputs blocking image creation.
ENV DEBIAN_FRONTEND=noninteractive
# Set timezone as it is required by some packages.
ENV TZ=America/Los_Angeles
# CUDA Home, required to find CUDA in some packages.
ENV FORCE_CUDA=1
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy
ENV UV_PYTHON_INSTALL_DIR=/python
ENV UV_PROJECT_ENVIRONMENT=/python/.venv
# Only use the managed Python version
ENV UV_PYTHON_PREFERENCE=only-managed
ENV PATH="/python/.venv/bin:$PATH"


# Install required apt packages and clear cache afterwards.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    ffmpeg \
    git \
    vim \
    unzip \
    curl \
    tmux \
    libatlas-base-dev \
    libhdf5-dev \
    libcgal-dev \
    libeigen3-dev \
    libfreeimage-dev \
    libgflags-dev \
    libegl1 \
    libgl1 \
    libgomp1 \
    libopenblas-dev \
    protobuf-compiler \
    sudo \
    vim-tiny \
    wget \
    openssh-server \
    libsm6 \
    libxext6 \
    openmpi-bin \
    libopenmpi-dev && \
    rm -rf /var/lib/apt/lists/*

# Create non root user and setup environment.
RUN useradd -m -d /home/user -g root -G sudo -u 1000 user
RUN usermod -aG sudo user
# Set user password
RUN echo "user:user" | chpasswd
# Ensure sudo group users are not asked for a password when using sudo command by amending sudoers file
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Install python
RUN uv python install 3.12

# Install dependencies
WORKDIR /python
COPY pyproject.toml requirements.manual.txt /python/

RUN uv sync -p 3.12 && \
    uv pip install torch==2.4.0 torchvision==0.19.0 --index-url https://download.pytorch.org/whl/cu121 && \
    uv pip install vllm==0.6.3 && \
    uv pip install --no-deps --no-build-isolation -r requirements.manual.txt

WORKDIR /workspace

ENV HF_HUB_CACHE=/workspace/.cache/huggingface
ENV VLLM_CACHE_ROOT=/workspace/.cache/vllm

CMD /bin/bash
